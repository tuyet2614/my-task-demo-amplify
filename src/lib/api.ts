import { generateClient } from 'aws-amplify/api'
import { Task, CreateTaskInput, UpdateTaskInput, TaskStatus } from '@/types'

const client = generateClient()

// GraphQL operations will be auto-generated by Amplify
// For now, we'll create placeholder functions

export const taskService = {
  async createTask(input: CreateTaskInput): Promise<Task> {
    try {
      // This will be replaced with actual GraphQL mutation
      const result = await client.graphql({
        query: `
          mutation CreateTask($input: CreateTaskInput!) {
            createTask(input: $input) {
              id
              title
              description
              status
              attachment
              createdAt
              updatedAt
            }
          }
        `,
        variables: { input: { ...input, status: TaskStatus.TODO } },
      })
      return result.data.createTask
    } catch (error) {
      console.error('Create task error:', error)
      throw error
    }
  },

  async updateTask(input: UpdateTaskInput): Promise<Task> {
    try {
      const result = await client.graphql({
        query: `
          mutation UpdateTask($input: UpdateTaskInput!) {
            updateTask(input: $input) {
              id
              title
              description
              status
              attachment
              createdAt
              updatedAt
            }
          }
        `,
        variables: { input },
      })
      return result.data.updateTask
    } catch (error) {
      console.error('Update task error:', error)
      throw error
    }
  },

  async deleteTask(id: string): Promise<void> {
    try {
      await client.graphql({
        query: `
          mutation DeleteTask($id: ID!) {
            deleteTask(id: $id)
          }
        `,
        variables: { id },
      })
    } catch (error) {
      console.error('Delete task error:', error)
      throw error
    }
  },

  async listTasks(): Promise<Task[]> {
    try {
      const result = await client.graphql({
        query: `
          query ListTasks {
            listTasks {
              items {
                id
                title
                description
                status
                attachment
                createdAt
                updatedAt
              }
            }
          }
        `,
      })
      return result.data.listTasks.items
    } catch (error) {
      console.error('List tasks error:', error)
      throw error
    }
  },

  async getTask(id: string): Promise<Task> {
    try {
      const result = await client.graphql({
        query: `
          query GetTask($id: ID!) {
            getTask(id: $id) {
              id
              title
              description
              status
              attachment
              createdAt
              updatedAt
            }
          }
        `,
        variables: { id },
      })
      return result.data.getTask
    } catch (error) {
      console.error('Get task error:', error)
      throw error
    }
  },
}
