import { generateClient } from "aws-amplify/api";
import { Task, CreateTaskInput, UpdateTaskInput, TaskStatus } from "@/types";

const client = generateClient();

// GraphQL operations will be auto-generated by Amplify
// For now, we'll create placeholder functions

export const taskService = {
  async createTask(input: CreateTaskInput): Promise<Task> {
    try {
      // This will be replaced with actual GraphQL mutation
      const result = await client.graphql({
        query: `
          mutation CreateTask($input: CreateTaskInput!) {
            createTask(input: $input) {
              id
              title
              description
              status
              attachment
              createdAt
              updatedAt
            }
          }
        `,
        variables: { input: { ...input, status: TaskStatus.TODO } },
      });
      const task = (result as { data?: { createTask?: Task } }).data?.createTask;
      if (!task) {
        throw new Error("CreateTask returned no data");
      }
      return task;
    } catch (error) {
      console.error("Create task error:", error);
      throw error;
    }
  },

  async updateTask(input: UpdateTaskInput): Promise<Task> {
    try {
      const result = await client.graphql({
        query: `
          mutation UpdateTask($input: UpdateTaskInput!) {
            updateTask(input: $input) {
              id
              title
              description
              status
              attachment
              createdAt
              updatedAt
            }
          }
        `,
        variables: { input },
      });
      const task = (result as { data?: { updateTask?: Task } }).data?.updateTask;
      if (!task) {
        throw new Error("UpdateTask returned no data");
      }
      return task;
    } catch (error) {
      console.error("Update task error:", error);
      throw error;
    }
  },

  async deleteTask(id: string): Promise<void> {
    try {
      await client.graphql({
        query: `
          mutation DeleteTask($input: DeleteTaskInput!) {
            deleteTask(input: $input) {
              id
            }
          }
        `,
        variables: { input: { id } },
      });
    } catch (error) {
      console.error("Delete task error:", error);
      throw error;
    }
  },

  async listTasks(): Promise<Task[]> {
    try {
      const result = await client.graphql({
        query: `
          query ListTasks {
            listTasks {
              items {
                id
                title
                description
                status
                attachment
                createdAt
                updatedAt
              }
            }
          }
        `,
      });
      const items = (result as { data?: { listTasks?: { items?: Task[] } } }).data?.listTasks?.items;
      if (!items) {
        return [];
      }
      return items;
    } catch (error) {
      console.error("List tasks error:", error);
      throw error;
    }
  },

  async getTask(id: string): Promise<Task> {
    try {
      const result = await client.graphql({
        query: `
          query GetTask($id: ID!) {
            getTask(id: $id) {
              id
              title
              description
              status
              attachment
              createdAt
              updatedAt
            }
          }
        `,
        variables: { id },
      });
      const task = (result as { data?: { getTask?: Task } }).data?.getTask;
      if (!task) {
        throw new Error("GetTask returned no data");
      }
      return task;
    } catch (error) {
      console.error("Get task error:", error);
      throw error;
    }
  },
};
